import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Function to load data
def load_data(file_name):
    if os.path.exists(file_name):
        return pd.read_csv(file_name)
    else:
        print(f"File {file_name} does not exist.")
        return None

# Function to create bar plots with optional legend
def create_bar_plot(data, x_col, y_col, hue_col=None, title='', xlabel='', ylabel='', palette='viridis',
                    legend_labels=None):
    plt.figure(figsize=(10, 6))
    if hue_col:
        plot = sns.barplot(data=data, x=x_col, y=y_col, hue=hue_col, palette=palette)
        if legend_labels:
            handles, labels = plot.get_legend_handles_labels()
            plt.legend(handles, legend_labels, title=hue_col)
    else:
        sns.barplot(data=data, x=x_col, y=y_col, color='skyblue')
        if legend_labels:
            handles = [plt.Rectangle((0, 0), 1, 1, color='skyblue') for _ in legend_labels]
            plt.legend(handles, legend_labels, title=x_col)

    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.title(title)
    plt.show()

# Load data from CSV files generated by SQL
dfs = [load_data(f'query_result_{i}.csv') for i in range(1, 10)]

# Check if all dataframes are loaded successfully
dfs = [df for df in dfs if df is not None]

# Data analysis
print("Average purchase value for each city:")
print(dfs[1])

print("\nTotal purchase for each city by gender:")
print(dfs[2])

print("\nMost popular product category for each city:")
print(dfs[3])

print("\nAverage purchase value by age and marital status:")
print(dfs[4])

# Visualization of results
# Average purchase value for each city with custom legend
city_legend_labels = ['A - Large metropolitan cities', 'B - Smaller cities', 'C - Rural areas']
create_bar_plot(dfs[1], 'City_Category', 'Avg_Purchase', title='Average Purchase by City Category',
                xlabel='City Category', ylabel='Average Purchase', legend_labels=city_legend_labels)

# Total purchase for each city by gender with custom legend
gender_legend_labels = ['F - Female', 'M - Male']
create_bar_plot(dfs[2], 'City_Category', 'Total_Purchase', hue_col='Gender',
                title='Total Purchase by City Category and Gender', xlabel='City Category', ylabel='Total Purchase',
                legend_labels=gender_legend_labels)

# Average purchase value by age and marital status with custom legend
marital_status_legend_labels = ['Single', 'Married']
create_bar_plot(dfs[4], 'Age', 'Avg_Purchase', hue_col='Marital_Status',
                title='Average Purchase by Age and Marital Status', xlabel='Age', ylabel='Average Purchase',
                legend_labels=marital_status_legend_labels)

# Average purchase value for each product category
create_bar_plot(dfs[5], 'Product_Category', 'Avg_Purchase', title='Average Purchase by Product Category',
                xlabel='Product Category', ylabel='Average Purchase')

# Purchase analysis based on years spent in the city
create_bar_plot(dfs[6], 'Stay_In_Current_City_Years', 'Avg_Purchase',
                title='Average Purchase by Stay In Current City Years', xlabel='Stay In Current City Years',
                ylabel='Average Purchase')

# Calculate maximum and minimum purchase by occupation from DataFrame 1
occupation_stats = dfs[0].groupby('Occupation')['Purchase'].agg(['max', 'min']).reset_index()
occupation_stats.columns = ['Occupation', 'Max_Purchase', 'Min_Purchase']

# Maximum and Minimum Purchase by Occupation
create_bar_plot(occupation_stats, 'Occupation', 'Max_Purchase', title='Maximum Purchase by Occupation',
                xlabel='Occupation', ylabel='Max Purchase')
